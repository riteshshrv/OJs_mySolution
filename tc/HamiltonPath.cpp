#include <iostream> 
#include <vector> 
#include <string> 

using namespace std; 

bool vis[100]; 
int d[100]; 
vector <string> road; 
int n; 

class HamiltonPath 
{ 
    void dfs(int now) 
    { 
        vis[now]=true; 
        for (int i=0;i<n;i++) 
            if ((road[now][i]=='Y')&&(!vis[i])) dfs(i); 
    } 
     
public: 
    int countPaths(vector <string> roads) 
    { 
        road=roads; 
        memset(vis,false,sizeof(vis)); 
        n=roads.size(); 
        for (int i=0;i<n;i++) 
        { 
            int s=0; 
            for (int j=0;j<n;j++) 
                if (roads[i][j]=='Y') s++; 
            if (s>2) return 0; 
            d[i]=s; 
        } 
        int tot1=0,tot2=0; 
        for (int i=0;i<n;i++) 
            if ((!vis[i])&&(d[i]<2))  
            { 
                dfs(i); 
                if (d[i]==0) tot1++; 
                    else tot2++; 
            } 
        for (int i=0;i<n;i++) 
            if (!vis[i]) return 0; 
        long long ans=1; 
        for (long long i=0;i<tot1+tot2;i++) ans=(ans*(i+1)) % 1000000007; 
        for (int i=0;i<tot2;i++) 
            ans=(ans*2) % 1000000007; 
        return ans; 
    } 
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit-pf 2.3.0
#include <iostream>
#include <string>
#include <vector>
#include <ctime>
#include <cmath>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <string> p0, bool hasAnswer, int p1) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p0[i] << "\"";
	}
	cout << "}";
	cout << "]" << endl;
	HamiltonPath *obj;
	int answer;
	obj = new HamiltonPath();
	clock_t startTime = clock();
	answer = obj->countPaths(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p1 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	bool disabled;
	bool tests_disabled;
	all_right = true;
	tests_disabled = false;
	
	vector <string> p0;
	int p1;
	
	// ----- test 0 -----
	disabled = false;
	p0 = {"NYN","YNN","NNN"};
	p1 = 4;
	all_right = (disabled || KawigiEdit_RunTest(0, p0, true, p1) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 1 -----
	disabled = false;
	p0 = {"NYYY","YNNN","YNNN","YNNN"};
	p1 = 0;
	all_right = (disabled || KawigiEdit_RunTest(1, p0, true, p1) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 2 -----
	disabled = false;
	p0 = {"NYY","YNY","YYN"};
	p1 = 0;
	all_right = (disabled || KawigiEdit_RunTest(2, p0, true, p1) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 3 -----
	disabled = false;
	p0 = {"NNNNNY","NNNNYN","NNNNYN","NNNNNN","NYYNNN","YNNNNN"};
	p1 = 24;
	all_right = (disabled || KawigiEdit_RunTest(3, p0, true, p1) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	if (all_right) {
		if (tests_disabled) {
			cout << "You're a stud (but some test cases were disabled)!" << endl;
		} else {
			cout << "You're a stud (at least on given cases)!" << endl;
		}
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit-pf 2.3.0!
